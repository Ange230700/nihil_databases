#!/usr/bin/env bash
set -euo pipefail
. "$(dirname "$0")/_/husky.sh"

echo "üîÅ initializing submodules‚Ä¶"
git submodule update --init --recursive

echo "üîç checking submodules status‚Ä¶"
git submodule foreach --recursive '
  set -e
  echo ""
  echo "‚Äî $name ‚Äî"

  # 1) uncommitted/staged changes guard
  if ! git diff --quiet || ! git diff --cached --quiet; then
    echo "‚ùå $name has uncommitted or staged changes. Commit or stash before pushing the superproject."
    exit 1
  fi

  # 2) upstream existence
  upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || true)
  if [ -z "$upstream" ]; then
    echo "‚ÑπÔ∏è  $name has no upstream set (e.g., no remote tracking branch). Skipping ahead/behind checks."
    exit 0
  fi

  # 3) refresh remote status
  git fetch --quiet --prune

  # 4) ahead/behind computation
  counts=$(git rev-list --left-right --count "$upstream"...HEAD || echo "0	0")
  behind=$(echo "$counts" | awk "{print \$1}")
  ahead=$(echo "$counts" | awk "{print \$2}")

  if [ "$behind" != "0" ]; then
    echo "‚ùå $name is BEHIND $upstream by $behind commit(s). Pull/rebase the submodule first."
    exit 1
  fi

  if [ "$ahead" != "0" ]; then
    echo "‚ùå $name is AHEAD of $upstream by $ahead commit(s). Push the submodule first."
    exit 1
  fi

  echo "‚úÖ $name is clean and in sync with $upstream."
'

echo ""
echo "‚úÖ all submodules clean & pushed. proceeding with superproject push‚Ä¶"
