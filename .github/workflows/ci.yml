name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  affected:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      MYSQL_VERSION: "8.4"
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATA_DIR: .ci/mysql-data

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Cache MySQL data dir (to speed up heavy migrations) ---
      - name: Restore MySQL data cache
        id: mysql-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.MYSQL_DATA_DIR }}
          key: ${{ runner.os }}-mysql-${{ env.MYSQL_VERSION }}-${{ hashFiles('**/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-mysql-${{ env.MYSQL_VERSION }}-

      - name: Ensure datadir exists
        run: mkdir -p "${MYSQL_DATA_DIR}"

      - name: Start MySQL (mounted datadir)
        run: |
          docker run -d --name mysql-ci \
            -e MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}" \
            -p 3306:3306 \
            -v "$PWD/${MYSQL_DATA_DIR}":/var/lib/mysql \
            "mysql:${MYSQL_VERSION}" \
            --default-authentication-plugin=mysql_native_password

      - name: Wait for MySQL readiness
        run: |
          for i in {1..60}; do
            if docker exec mysql-ci mysqladmin ping -uroot -p"${MYSQL_ROOT_PASSWORD}" --silent; then
              echo "MySQL is ready"; exit 0
            fi
            echo "Waiting for MySQLâ€¦"; sleep 2
          done
          echo "MySQL did not become ready in time" >&2
          docker logs mysql-ci || true
          exit 1

      - name: Create test databases (idempotent)
        run: |
          docker exec -i mysql-ci mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS nihil_user_test;"
          docker exec -i mysql-ci mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS nihil_post_test;"

      - name: Copy .env.sample to .env
        run: |
          cp -n user/.env.sample user/.env || true
          cp -n post/.env.sample post/.env || true

      - name: Set test DB URLs
        run: |
          echo "USER_DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@127.0.0.1:3306/nihil_user_test" >> user/.env
          echo "POST_DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@127.0.0.1:3306/nihil_post_test" >> post/.env

      # --- Node / caches ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Prisma artifacts
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules/.prisma
            **/prisma/generated
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: npm ci

      # --- Nx affected flow (runs AFTER DB is warm) ---
      - name: Lint affected
        run: npx nx affected --target=lint --parallel=3 --configuration=ci --base=origin/${{ github.event.pull_request.base.ref || 'main' }} --head=HEAD

      - name: Check TypeScript version
        run: npx tsc --version

      - name: Clean all build outputs
        run: rm -rf shared/dist shared/.tsbuildinfo user/dist user/.tsbuildinfo post/dist post/.tsbuildinfo

      - name: Build affected (CI mode)
        run: npx nx affected --target=build --parallel=3 --configuration=ci --base=origin/${{ github.event.pull_request.base.ref || 'main' }} --head=HEAD

      - name: Push schemas for affected projects
        run: npx nx affected --target=prisma:db:push --parallel=3 --configuration=ci --base=origin/${{ github.event.pull_request.base.ref || 'main' }} --head=HEAD

      - name: Test affected
        run: npx nx affected --target=test --parallel=3 --configuration=ci --base=origin/${{ github.event.pull_request.base.ref || 'main' }} --head=HEAD

      # --- Teardown & persist MySQL cache ---
      - name: Stop MySQL (keep datadir)
        if: always()
        run: |
          docker logs mysql-ci || true
          docker stop mysql-ci || true
          docker rm mysql-ci || true

      - name: Save MySQL data cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MYSQL_DATA_DIR }}
          key: ${{ steps.mysql-cache-restore.outputs.cache-primary-key || format('{0}-mysql-{1}-{2}', runner.os, env.MYSQL_VERSION, hashFiles('**/prisma/schema.prisma')) }}
